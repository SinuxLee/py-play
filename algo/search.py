"""
一、静态查找（基于有序）
    1. 顺序查找
    2. 二分查找
    3. 插值查找
    4. 斐波那契查找
    5. 跳跃查找

二、基于哈希的查找
    1. 哈希查找（Hash Search）
        处理冲突：开放寻址、开链法等
        负载因子(元素数/桶数)：一般为0.75，超过时自动扩容。
        哈希函数：
            DJB2(实现简单), FNV1a, MurmurHash3, CityHash(FarmHash), 
            SipHash(安全), SHA-256(非常安全)
            xxHash(很快), CRC32(非常快)
    2. 布隆过滤器（Bloom Filter）

三、基于树的查找
    1. 二叉查找树（BST）
        左子树<根节点<右子树
    2. 平衡二叉树（AVL树）
    3. 红黑树（Red-Black Tree）
    4. B树 / B+树
    5. Trie树（字典树）

四、图与搜索算法(广义)
    1. 深度优先搜索（DFS）
    2. 广度优先搜索（BFS）
    3. A* 搜索算法
    4. Dijkstra算法
    5. Bellman-Ford算法

五、特殊查找
    1. 指数查找
    2. 分块查找
    3. 后缀查找
    4. KMP算法

数据无序、少量	    顺序查找
数据有序、静态	    二分查找 / 插值查找
数据动态更新频繁	平衡树（AVL、红黑树）
需要极快查找速度	哈希查找
需要字符串匹配	    Trie树 / KMP算法
路径或图问题	    DFS / BFS / A* / Dijkstra
需要高I/O性能   	B树 / B+树

"""

