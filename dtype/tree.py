# 搜索优化:
# BST / AVL / 红黑树：将线性查找 O(n) 优化为 O(log n)
# Trie：前缀匹配、字典查找、快速自动补全

# 排序优化:
# Heap：堆排序 O(n log n)
# 优先队列（最小堆 / 最大堆）：优化贪心算法（如 Dijkstra、Prim）

# 区间/范围查询:
# 线段树 / 树状数组：快速求区间和、最大值、最小值等
# Fenwick Tree（树状数组）可将区间查询从 O(n) 降为 O(log n)

# 图/网络优化:
# 并查集（Union-Find）+ 树结构：优化连通性判断、最小生成树 Kruskal
# 树形 DP：优化树上路径问题、子树统计问题

# 字符串处理:
# Trie / 后缀树 / 后缀数组：模式匹配、最长公共前缀、重复子串
# Rabin-Karp 可结合树结构做批量匹配优化

# 动态规划优化
# 树状 DP（Tree DP）：解决树结构上的最大独立集、路径和等问题
# 单调栈/单调树优化某些滑动窗口或区间 DP


# 二叉树（Binary Tree）: 基础结构，可用于递归问题、表达式树
# 二叉搜索树（BST）: 快速查找、插入、删除，优化搜索算法（O(log n) 平均
# 平衡树（AVL, 红黑树）: 保持树的平衡，优化查找、插入、删除操作
# 字典树（Trie）: 高效的字符串前缀匹配和存储
# 线段树（Segment Tree）: 区间查询和更新，常用于动态数组
# 树状数组（Fenwick Tree）: 高效的前缀和计算
# 后缀树/后缀数组: 字符串处理，快速查找子串
# KD树/四叉树/八叉树: 多维空间数据存储与查询（如最近邻搜索）
# B 树 / B+ 树: 数据库和文件系统中的高效存储与检索

# 并查集（Union-Find）: 动态连通性问题，优化图的连通分量查询
# 树形 DP: 解决树结构上的动态规划问题，如最大独立集
# 树的遍历（前序、中序、后序、层次遍历）: 基础操作，常用于各种树结构的处理
# 树的构建与序列化/反序列化: 用于存储和传输树结构数据
